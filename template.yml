AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS Serverless Spring Boot 2 API - org.example::spring-boot-lambda
Globals:
  Api:
    EndpointConfiguration: REGIONAL

Parameters:
  Stage:
    Type: String
    Default: env
  LocalDev:
    Type: String
    Default: false

Conditions:
  IsLocalDevEnv: !Equals [ !Ref LocalDev, true ]

Resources:



  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: ApiGatewayApi
      Description: Application REST API Endpoint
      StageName: !Ref Stage
      PropagateTags: true
      Tags:
        _custom_id_: appapi

  SpringBootLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SpringBootAPIHandler
      Handler: com.javatechie.StreamLambdaHandler::handleRequest
      Runtime: java21


      # This works but I want to use live reloading on local. I still want to use this when deploying to the cloud. 
      #CodeUri: ./lambda-functions/restApi

      # This doesn't work because the folder structure doesn't have the artifacts in the required structure
      # It needs to be stuctured like this: 
      # * artifactsFolder/
      # -- com/
      # -- lib/
      # -- application.yml
      #CodeUri:
      #  Bucket: hot-reload
      #  Key: /home/jfaulkner/CodeDemos/LambdaTuts/aws-lambda/lambda-functions/restApi/target

      # This doen't work either because while the artifacts are in the correct structure, they're inside a .zip archive â€” they
      # need to be inside a directory instead. 
      #CodeUri: 
      #  Bucket: hot-reload
      #  Key: /home/jfaulkner/CodeDemos/LambdaTuts/aws-lambda/lambda-functions/restApi/target/spring-boot-lambda-1.0-SNAPSHOT-lambda-package.zip

      # This works but I had to create TestPackaged_SpringBootLambdaFunction manually. I need something like this created automatically 
      # when I rebuild the project locally or when changes are detected in the source code when hot-reload is enabled 
      # (haven't implemented that yet)
      # I'm only including this folder in the repository at the moment for illustrative purposes. 
      CodeUri:
        Bucket: hot-reload
        Key: /home/jfaulkner/CodeDemos/LambdaTuts/aws-lambda/lambda-functions/restApi/TestPackaged_SpringBootLambdaFunction

      MemorySize: 512
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref MessageTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:DescribeTable
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource: !GetAtt MessageTable.Arn

      Timeout: 30
      Events:
        ProxyResource:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayApi
            Path: /{proxy+}
            Method: any

      Environment:
        Variables:
          !If
            - IsLocalDevEnv
            - _JAVA_OPTIONS: "-Xshare:off -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=0.0.0.0:5050"
              AWS_ENDPOINT: "https://localhost.localstack.cloud:4566"
              AWS_REGION: "us-west-2"
            - {} # No variables needed for non-local environments

  MessageTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Message
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2


Outputs:

  DynamoDBTableName:
    Description: DynamoDB Table Name for Messages
    Value: !Ref MessageTable
    Export:
      Name: DynamoDBTableName

  LocalStackLambdaApiPing:
    Description: URL for Lambda application running on Localstack
    Value: !Sub 'http://${ApiGatewayApi}.execute-api.localhost.localstack.cloud:4566/${Stage}/ping'
    Export:
      Name: LocalStackLambdaApiPing
  CloudLambdaApi:
    Description: URL for application when App is deployed to AWS Cloud
    Value: !Sub 'https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/ping'
    Export:
      Name: CloudLambdaApi
